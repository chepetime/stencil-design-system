{"version":3,"mappings":"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","names":["NAMESPACE","queuePending","createTime","fnName","tagName","uniqueTime","key","measureText","HYDRATED_CSS","isComplexType","o","queryNonceMetaTagContent","doc","_a","_b","_c","h","nodeName","vnodeData","children","child","simple","lastSimple","vNodeChildren","walk","c","i","newVNode","vnode","tag","text","Host","isHost","node","parsePropertyValue","propValue","propType","emitEvent","elm","name","opts","ev","plt","rootAppliedStyles","registerStyle","scopeId","cssText","allowCS","style","styles","supportsConstructableStylesheets","addStyle","styleContainerNode","cmpMeta","mode","getScopeId","appliedStyles","styleElm","nonce","attachStyles","hostRef","endAttachStyles","cmp","createElm","oldParentVNode","newParentVNode","childIndex","parentElm","childNode","addVnodes","before","parentVNode","vnodes","startIdx","endIdx","containerElm","removeVnodes","index","updateChildren","oldCh","newCh","oldStartIdx","newStartIdx","oldEndIdx","oldStartVnode","oldEndVnode","newEndIdx","newStartVnode","newEndVnode","isSameVnode","patch","leftVNode","rightVNode","oldVNode","oldChildren","newChildren","renderVdom","renderFnResults","isInitialLoad","hostElm","rootVnode","attachToAncestor","ancestorComponent","r","scheduleUpdate","writeTask","dispatchHooks","endSchedule","instance","maybePromise","enqueue","updateComponent","fn","isPromisey","endUpdate","rc","endRender","callRender","cb","childrenPromises","postUpdate","postUpdateComponent","e","consoleError","endPostUpdate","addHydratedFlag","appDidLoad","nextTick","who","win","getValue","ref","propName","getHostRef","setValue","newVal","oldVal","flags","areBothNaN","didValueChange","proxyComponent","Cstr","members","prototype","memberName","memberFlags","newValue","attrNameToPropName","attrName","oldValue","entry","callbackName","_","m","initializeComponent","hmrVersionId","loadModule","endLoad","endNewInstance","endRegisterStyles","schedule","fireConnectedCallback","connectedCallback","endConnected","value","disconnectInstance","disconnectedCallback","bootstrapLazy","lazyBundles","options","endBootstrap","cmpTags","exclude","customElements","head","metaCharset","visibilityStyle","deferredConnectedCallbacks","appLoadFallback","isBootstrapping","lazyBundle","compactMeta","HostElement","self","registerHost","host","hostRefs","hostElement","el","cmpModules","exportName","bundleId","module","__vitePreload","importedModule","eventName","listener","promiseResolve","v","queueDomReads","queueDomWrites","queueTask","queue","write","flush","consume","defineCustomElements","a","preview"],"sources":["../../../../packages/ui-stencil/dist/esm/index-cef3b3fe.js","../../../../packages/ui-stencil/dist/esm/loader.js","../../../../packages/ui-stencil/loader/index.js","../../.storybook/preview.js"],"sourcesContent":["const NAMESPACE = 'ui-stencil';\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/snabbdom/snabbdom/blob/master/LICENSE\n *\n * Modified for Stencil's renderer and slot projection\n */\nlet queuePending = false;\nconst createTime = (fnName, tagName = '') => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst uniqueTime = (key, measureText) => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\n/**\n * Check whether a value is a 'complex type', defined here as an object or a\n * function.\n *\n * @param o the value to check\n * @returns whether it's a complex type or not\n */\nconst isComplexType = (o) => {\n    // https://jsperf.com/typeof-fn-object/5\n    o = typeof o;\n    return o === 'object' || o === 'function';\n};\n/**\n * Helper method for querying a `meta` tag that contains a nonce value\n * out of a DOM's head.\n *\n * @param doc The DOM containing the `head` to query against\n * @returns The content of the meta tag representing the nonce value, or `undefined` if no tag\n * exists or the tag has no content.\n */\nfunction queryNonceMetaTagContent(doc) {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = doc.head) === null || _a === void 0 ? void 0 : _a.querySelector('meta[name=\"csp-nonce\"]')) === null || _b === void 0 ? void 0 : _b.getAttribute('content')) !== null && _c !== void 0 ? _c : undefined;\n}\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nconst h = (nodeName, vnodeData, ...children) => {\n    let child = null;\n    let simple = false;\n    let lastSimple = false;\n    const vNodeChildren = [];\n    const walk = (c) => {\n        for (let i = 0; i < c.length; i++) {\n            child = c[i];\n            if (Array.isArray(child)) {\n                walk(child);\n            }\n            else if (child != null && typeof child !== 'boolean') {\n                if ((simple = typeof nodeName !== 'function' && !isComplexType(child))) {\n                    child = String(child);\n                }\n                if (simple && lastSimple) {\n                    // If the previous child was simple (string), we merge both\n                    vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n                }\n                else {\n                    // Append a new vNode, if it's text, we create a text vNode\n                    vNodeChildren.push(simple ? newVNode(null, child) : child);\n                }\n                lastSimple = simple;\n            }\n        }\n    };\n    walk(children);\n    const vnode = newVNode(nodeName, null);\n    vnode.$attrs$ = vnodeData;\n    if (vNodeChildren.length > 0) {\n        vnode.$children$ = vNodeChildren;\n    }\n    return vnode;\n};\n/**\n * A utility function for creating a virtual DOM node from a tag and some\n * possible text content.\n *\n * @param tag the tag for this element\n * @param text possible text content for the node\n * @returns a newly-minted virtual DOM node\n */\nconst newVNode = (tag, text) => {\n    const vnode = {\n        $flags$: 0,\n        $tag$: tag,\n        $text$: text,\n        $elm$: null,\n        $children$: null,\n    };\n    return vnode;\n};\nconst Host = {};\n/**\n * Check whether a given node is a Host node or not\n *\n * @param node the virtual DOM node to check\n * @returns whether it's a Host node or not\n */\nconst isHost = (node) => node && node.$tag$ === Host;\n/**\n * Parse a new property value for a given property type.\n *\n * While the prop value can reasonably be expected to be of `any` type as far as TypeScript's type checker is concerned,\n * it is not safe to assume that the string returned by evaluating `typeof propValue` matches:\n *   1. `any`, the type given to `propValue` in the function signature\n *   2. the type stored from `propType`.\n *\n * This function provides the capability to parse/coerce a property's value to potentially any other JavaScript type.\n *\n * Property values represented in TSX preserve their type information. In the example below, the number 0 is passed to\n * a component. This `propValue` will preserve its type information (`typeof propValue === 'number'`). Note that is\n * based on the type of the value being passed in, not the type declared of the class member decorated with `@Prop`.\n * ```tsx\n * <my-cmp prop-val={0}></my-cmp>\n * ```\n *\n * HTML prop values on the other hand, will always a string\n *\n * @param propValue the new value to coerce to some type\n * @param propType the type of the prop, expressed as a binary number\n * @returns the parsed/coerced value\n */\nconst parsePropertyValue = (propValue, propType) => {\n    // ensure this value is of the correct prop type\n    if (propValue != null && !isComplexType(propValue)) {\n        if (propType & 1 /* MEMBER_FLAGS.String */) {\n            // could have been passed as a number or boolean\n            // but we still want it as a string\n            return String(propValue);\n        }\n        // redundant return here for better minification\n        return propValue;\n    }\n    // not sure exactly what type we want\n    // so no need to change to a different type\n    return propValue;\n};\n/**\n * Helper function to create & dispatch a custom Event on a provided target\n * @param elm the target of the Event\n * @param name the name to give the custom Event\n * @param opts options for configuring a custom Event\n * @returns the custom Event\n */\nconst emitEvent = (elm, name, opts) => {\n    const ev = plt.ce(name, opts);\n    elm.dispatchEvent(ev);\n    return ev;\n};\nconst rootAppliedStyles = /*@__PURE__*/ new WeakMap();\nconst registerStyle = (scopeId, cssText, allowCS) => {\n    let style = styles.get(scopeId);\n    if (supportsConstructableStylesheets && allowCS) {\n        style = (style || new CSSStyleSheet());\n        if (typeof style === 'string') {\n            style = cssText;\n        }\n        else {\n            style.replaceSync(cssText);\n        }\n    }\n    else {\n        style = cssText;\n    }\n    styles.set(scopeId, style);\n};\nconst addStyle = (styleContainerNode, cmpMeta, mode) => {\n    var _a;\n    const scopeId = getScopeId(cmpMeta);\n    const style = styles.get(scopeId);\n    // if an element is NOT connected then getRootNode() will return the wrong root node\n    // so the fallback is to always use the document for the root node in those cases\n    styleContainerNode = styleContainerNode.nodeType === 11 /* NODE_TYPE.DocumentFragment */ ? styleContainerNode : doc;\n    if (style) {\n        if (typeof style === 'string') {\n            styleContainerNode = styleContainerNode.head || styleContainerNode;\n            let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n            let styleElm;\n            if (!appliedStyles) {\n                rootAppliedStyles.set(styleContainerNode, (appliedStyles = new Set()));\n            }\n            if (!appliedStyles.has(scopeId)) {\n                {\n                    styleElm = doc.createElement('style');\n                    styleElm.innerHTML = style;\n                    // Apply CSP nonce to the style tag if it exists\n                    const nonce = (_a = plt.$nonce$) !== null && _a !== void 0 ? _a : queryNonceMetaTagContent(doc);\n                    if (nonce != null) {\n                        styleElm.setAttribute('nonce', nonce);\n                    }\n                    styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n                }\n                if (appliedStyles) {\n                    appliedStyles.add(scopeId);\n                }\n            }\n        }\n        else if (!styleContainerNode.adoptedStyleSheets.includes(style)) {\n            styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n        }\n    }\n    return scopeId;\n};\nconst attachStyles = (hostRef) => {\n    const cmpMeta = hostRef.$cmpMeta$;\n    const elm = hostRef.$hostElement$;\n    const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n    addStyle(elm.getRootNode(), cmpMeta);\n    endAttachStyles();\n};\nconst getScopeId = (cmp, mode) => 'sc-' + (cmp.$tagName$);\n/**\n * Create a DOM Node corresponding to one of the children of a given VNode.\n *\n * @param oldParentVNode the parent VNode from the previous render\n * @param newParentVNode the parent VNode from the current render\n * @param childIndex the index of the VNode, in the _new_ parent node's\n * children, for which we will create a new DOM node\n * @param parentElm the parent DOM node which our new node will be a child of\n * @returns the newly created node\n */\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n    // tslint:disable-next-line: prefer-const\n    const newVNode = newParentVNode.$children$[childIndex];\n    let i = 0;\n    let elm;\n    let childNode;\n    if (newVNode.$text$ !== null) {\n        // create text node\n        elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n    }\n    else {\n        // create element\n        elm = newVNode.$elm$ = (doc.createElement(newVNode.$tag$));\n        if (newVNode.$children$) {\n            for (i = 0; i < newVNode.$children$.length; ++i) {\n                // create the node\n                childNode = createElm(oldParentVNode, newVNode, i);\n                // return node could have been null\n                if (childNode) {\n                    // append our new node\n                    elm.appendChild(childNode);\n                }\n            }\n        }\n    }\n    return elm;\n};\n/**\n * Create DOM nodes corresponding to a list of {@link d.Vnode} objects and\n * add them to the DOM in the appropriate place.\n *\n * @param parentElm the DOM node which should be used as a parent for the new\n * DOM nodes\n * @param before a child of the `parentElm` which the new children should be\n * inserted before (optional)\n * @param parentVNode the parent virtual DOM node\n * @param vnodes the new child virtual DOM nodes to produce DOM nodes for\n * @param startIdx the index in the child virtual DOM nodes at which to start\n * creating DOM nodes (inclusive)\n * @param endIdx the index in the child virtual DOM nodes at which to stop\n * creating DOM nodes (inclusive)\n */\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n    let containerElm = (parentElm);\n    let childNode;\n    for (; startIdx <= endIdx; ++startIdx) {\n        if (vnodes[startIdx]) {\n            childNode = createElm(null, parentVNode, startIdx);\n            if (childNode) {\n                vnodes[startIdx].$elm$ = childNode;\n                containerElm.insertBefore(childNode, before);\n            }\n        }\n    }\n};\n/**\n * Remove the DOM elements corresponding to a list of {@link d.VNode} objects.\n * This can be used to, for instance, clean up after a list of children which\n * should no longer be shown.\n *\n * This function also handles some of Stencil's slot relocation logic.\n *\n * @param vnodes a list of virtual DOM nodes to remove\n * @param startIdx the index at which to start removing nodes (inclusive)\n * @param endIdx the index at which to stop removing nodes (inclusive)\n */\nconst removeVnodes = (vnodes, startIdx, endIdx) => {\n    for (let index = startIdx; index <= endIdx; ++index) {\n        const vnode = vnodes[index];\n        if (vnode) {\n            const elm = vnode.$elm$;\n            if (elm) {\n                // remove the vnode's element from the dom\n                elm.remove();\n            }\n        }\n    }\n};\n/**\n * Reconcile the children of a new VNode with the children of an old VNode by\n * traversing the two collections of children, identifying nodes that are\n * conserved or changed, calling out to `patch` to make any necessary\n * updates to the DOM, and rearranging DOM nodes as needed.\n *\n * The algorithm for reconciling children works by analyzing two 'windows' onto\n * the two arrays of children (`oldCh` and `newCh`). We keep track of the\n * 'windows' by storing start and end indices and references to the\n * corresponding array entries. Initially the two 'windows' are basically equal\n * to the entire array, but we progressively narrow the windows until there are\n * no children left to update by doing the following:\n *\n * 1. Skip any `null` entries at the beginning or end of the two arrays, so\n *    that if we have an initial array like the following we'll end up dealing\n *    only with a window bounded by the highlighted elements:\n *\n *    [null, null, VNode1 , ... , VNode2, null, null]\n *                 ^^^^^^         ^^^^^^\n *\n * 2. Check to see if the elements at the head and tail positions are equal\n *    across the windows. This will basically detect elements which haven't\n *    been added, removed, or changed position, i.e. if you had the following\n *    VNode elements (represented as HTML):\n *\n *    oldVNode: `<div><p><span>HEY</span></p></div>`\n *    newVNode: `<div><p><span>THERE</span></p></div>`\n *\n *    Then when comparing the children of the `<div>` tag we check the equality\n *    of the VNodes corresponding to the `<p>` tags and, since they are the\n *    same tag in the same position, we'd be able to avoid completely\n *    re-rendering the subtree under them with a new DOM element and would just\n *    call out to `patch` to handle reconciling their children and so on.\n *\n * 3. Check, for both windows, to see if the element at the beginning of the\n *    window corresponds to the element at the end of the other window. This is\n *    a heuristic which will let us identify _some_ situations in which\n *    elements have changed position, for instance it _should_ detect that the\n *    children nodes themselves have not changed but merely moved in the\n *    following example:\n *\n *    oldVNode: `<div><element-one /><element-two /></div>`\n *    newVNode: `<div><element-two /><element-one /></div>`\n *\n *    If we find cases like this then we also need to move the concrete DOM\n *    elements corresponding to the moved children to write the re-order to the\n *    DOM.\n *\n * 4. Finally, if VNodes have the `key` attribute set on them we check for any\n *    nodes in the old children which have the same key as the first element in\n *    our window on the new children. If we find such a node we handle calling\n *    out to `patch`, moving relevant DOM nodes, and so on, in accordance with\n *    what we find.\n *\n * Finally, once we've narrowed our 'windows' to the point that either of them\n * collapse (i.e. they have length 0) we then handle any remaining VNode\n * insertion or deletion that needs to happen to get a DOM state that correctly\n * reflects the new child VNodes. If, for instance, after our window on the old\n * children has collapsed we still have more nodes on the new children that\n * we haven't dealt with yet then we need to add them, or if the new children\n * collapse but we still have unhandled _old_ children then we need to make\n * sure the corresponding DOM nodes are removed.\n *\n * @param parentElm the node into which the parent VNode is rendered\n * @param oldCh the old children of the parent node\n * @param newVNode the new VNode which will replace the parent\n * @param newCh the new children of the parent node\n */\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let node;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            // VNode might have been moved left\n            oldStartVnode = oldCh[++oldStartIdx];\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newStartVnode)) {\n            // if the start nodes are the same then we should patch the new VNode\n            // onto the old one, and increment our `newStartIdx` and `oldStartIdx`\n            // indices to reflect that. We don't need to move any DOM Nodes around\n            // since things are matched up in order.\n            patch(oldStartVnode, newStartVnode);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newEndVnode)) {\n            // likewise, if the end nodes are the same we patch new onto old and\n            // decrement our end indices, and also likewise in this case we don't\n            // need to move any DOM Nodes.\n            patch(oldEndVnode, newEndVnode);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newEndVnode)) {\n            patch(oldStartVnode, newEndVnode);\n            // We need to move the element for `oldStartVnode` into a position which\n            // will be appropriate for `newEndVnode`. For this we can use\n            // `.insertBefore` and `oldEndVnode.$elm$.nextSibling`. If there is a\n            // sibling for `oldEndVnode.$elm$` then we want to move the DOM node for\n            // `oldStartVnode` between `oldEndVnode` and it's sibling, like so:\n            //\n            // <old-start-node />\n            // <some-intervening-node />\n            // <old-end-node />\n            // <!-- ->              <-- `oldStartVnode.$elm$` should be inserted here\n            // <next-sibling />\n            //\n            // If instead `oldEndVnode.$elm$` has no sibling then we just want to put\n            // the node for `oldStartVnode` at the end of the children of\n            // `parentElm`. Luckily, `Node.nextSibling` will return `null` if there\n            // aren't any siblings, and passing `null` to `Node.insertBefore` will\n            // append it to the children of the parent element.\n            parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newStartVnode)) {\n            patch(oldEndVnode, newStartVnode);\n            // We've already checked above if `oldStartVnode` and `newStartVnode` are\n            // the same node, so since we're here we know that they are not. Thus we\n            // can move the element for `oldEndVnode` _before_ the element for\n            // `oldStartVnode`, leaving `oldStartVnode` to be reconciled in the\n            // future.\n            parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            {\n                // We either didn't find an element in the old children that matches\n                // the key of the first new child OR the build is not using `key`\n                // attributes at all. In either case we need to create a new element\n                // for the new node.\n                node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx);\n                newStartVnode = newCh[++newStartIdx];\n            }\n            if (node) {\n                // if we created a new node then handle inserting it to the DOM\n                {\n                    oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n                }\n            }\n        }\n    }\n    if (oldStartIdx > oldEndIdx) {\n        // we have some more new nodes to add which don't match up with old nodes\n        addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n    }\n    else if (newStartIdx > newEndIdx) {\n        // there are nodes in the `oldCh` array which no longer correspond to nodes\n        // in the new array, so lets remove them (which entails cleaning up the\n        // relevant DOM nodes)\n        removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n    }\n};\n/**\n * Compare two VNodes to determine if they are the same\n *\n * **NB**: This function is an equality _heuristic_ based on the available\n * information set on the two VNodes and can be misleading under certain\n * circumstances. In particular, if the two nodes do not have `key` attrs\n * (available under `$key$` on VNodes) then the function falls back on merely\n * checking that they have the same tag.\n *\n * So, in other words, if `key` attrs are not set on VNodes which may be\n * changing order within a `children` array or something along those lines then\n * we could obtain a false negative and then have to do needless re-rendering\n * (i.e. we'd say two VNodes aren't equal when in fact they should be).\n *\n * @param leftVNode the first VNode to check\n * @param rightVNode the second VNode to check\n * @returns whether they're equal or not\n */\nconst isSameVnode = (leftVNode, rightVNode) => {\n    // compare if two vnode to see if they're \"technically\" the same\n    // need to have the same element tag, and same key to be the same\n    if (leftVNode.$tag$ === rightVNode.$tag$) {\n        return true;\n    }\n    return false;\n};\n/**\n * Handle reconciling an outdated VNode with a new one which corresponds to\n * it. This function handles flushing updates to the DOM and reconciling the\n * children of the two nodes (if any).\n *\n * @param oldVNode an old VNode whose DOM element and children we want to update\n * @param newVNode a new VNode representing an updated version of the old one\n */\nconst patch = (oldVNode, newVNode) => {\n    const elm = (newVNode.$elm$ = oldVNode.$elm$);\n    const oldChildren = oldVNode.$children$;\n    const newChildren = newVNode.$children$;\n    const text = newVNode.$text$;\n    if (text === null) {\n        if (oldChildren !== null && newChildren !== null) {\n            // looks like there's child vnodes for both the old and new vnodes\n            // so we need to call `updateChildren` to reconcile them\n            updateChildren(elm, oldChildren, newVNode, newChildren);\n        }\n        else if (newChildren !== null) {\n            // no old child vnodes, but there are new child vnodes to add\n            if (oldVNode.$text$ !== null) {\n                // the old vnode was text, so be sure to clear it out\n                elm.textContent = '';\n            }\n            // add the new vnode children\n            addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n        }\n        else if (oldChildren !== null) {\n            // no new child vnodes, but there are old child vnodes to remove\n            removeVnodes(oldChildren, 0, oldChildren.length - 1);\n        }\n    }\n    else if (oldVNode.$text$ !== text) {\n        // update the text content for the text only vnode\n        // and also only if the text is different than before\n        elm.data = text;\n    }\n};\n/**\n * The main entry point for Stencil's virtual DOM-based rendering engine\n *\n * Given a {@link d.HostRef} container and some virtual DOM nodes, this\n * function will handle creating a virtual DOM tree with a single root, patching\n * the current virtual DOM tree onto an old one (if any), dealing with slot\n * relocation, and reflecting attributes.\n *\n * @param hostRef data needed to root and render the virtual DOM tree, such as\n * the DOM node into which it should be rendered.\n * @param renderFnResults the virtual DOM nodes to be rendered\n * @param isInitialLoad whether or not this is the first call after page load\n */\nconst renderVdom = (hostRef, renderFnResults, isInitialLoad = false) => {\n    const hostElm = hostRef.$hostElement$;\n    const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n    // if `renderFnResults` is a Host node then we can use it directly. If not,\n    // we need to call `h` again to wrap the children of our component in a\n    // 'dummy' Host node (well, an empty vnode) since `renderVdom` assumes\n    // implicitly that the top-level vdom node is 1) an only child and 2)\n    // contains attrs that need to be set on the host element.\n    const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n    // On the first render and *only* on the first render we want to check for\n    // any attributes set on the host element which are also set on the vdom\n    // node. If we find them, we override the value on the VDom node attrs with\n    // the value from the host element, which allows developers building apps\n    // with Stencil components to override e.g. the `role` attribute on a\n    // component even if it's already set on the `Host`.\n    if (isInitialLoad && rootVnode.$attrs$) {\n        for (const key of Object.keys(rootVnode.$attrs$)) {\n            // We have a special implementation in `setAccessor` for `style` and\n            // `class` which reconciles values coming from the VDom with values\n            // already present on the DOM element, so we don't want to override those\n            // attributes on the VDom tree with values from the host element if they\n            // are present.\n            //\n            // Likewise, `ref` and `key` are special internal values for the Stencil\n            // runtime and we don't want to override those either.\n            if (hostElm.hasAttribute(key) && !['key', 'ref', 'style', 'class'].includes(key)) {\n                rootVnode.$attrs$[key] = hostElm[key];\n            }\n        }\n    }\n    rootVnode.$tag$ = null;\n    rootVnode.$flags$ |= 4 /* VNODE_FLAGS.isHost */;\n    hostRef.$vnode$ = rootVnode;\n    rootVnode.$elm$ = oldVNode.$elm$ = (hostElm);\n    // synchronous patch\n    patch(oldVNode, rootVnode);\n};\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n    if (ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n        ancestorComponent['s-p'].push(new Promise((r) => (hostRef.$onRenderResolve$ = r)));\n    }\n};\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n    {\n        hostRef.$flags$ |= 16 /* HOST_FLAGS.isQueuedForUpdate */;\n    }\n    if (hostRef.$flags$ & 4 /* HOST_FLAGS.isWaitingForChildren */) {\n        hostRef.$flags$ |= 512 /* HOST_FLAGS.needsRerender */;\n        return;\n    }\n    attachToAncestor(hostRef, hostRef.$ancestorComponent$);\n    // there is no ancestor component or the ancestor component\n    // has already fired off its lifecycle update then\n    // fire off the initial update\n    const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n    return writeTask(dispatch) ;\n};\n/**\n * Dispatch initial-render and update lifecycle hooks, enqueuing calls to\n * component lifecycle methods like `componentWillLoad` as well as\n * {@link updateComponent}, which will kick off the virtual DOM re-render.\n *\n * @param hostRef a reference to a host DOM node\n * @param isInitialLoad whether we're on the initial load or not\n * @returns an empty Promise which is used to enqueue a series of operations for\n * the component\n */\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n    const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n    const instance = hostRef.$lazyInstance$ ;\n    // We're going to use this variable together with `enqueue` to implement a\n    // little promise-based queue. We start out with it `undefined`. When we add\n    // the first function to the queue we'll set this variable to be that\n    // function's return value. When we attempt to add subsequent values to the\n    // queue we'll check that value and, if it was a `Promise`, we'll then chain\n    // the new function off of that `Promise` using `.then()`. This will give our\n    // queue two nice properties:\n    //\n    // 1. If all functions added to the queue are synchronous they'll be called\n    //    synchronously right away.\n    // 2. If all functions added to the queue are asynchronous they'll all be\n    //    called in order after `dispatchHooks` exits.\n    let maybePromise;\n    endSchedule();\n    return enqueue(maybePromise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\n/**\n * This function uses a Promise to implement a simple first-in, first-out queue\n * of functions to be called.\n *\n * The queue is ordered on the basis of the first argument. If it's\n * `undefined`, then nothing is on the queue yet, so the provided function can\n * be called synchronously (although note that this function may return a\n * `Promise`). The idea is that then the return value of that enqueueing\n * operation is kept around, so that if it was a `Promise` then subsequent\n * functions can be enqueued by calling this function again with that `Promise`\n * as the first argument.\n *\n * @param maybePromise either a `Promise` which should resolve before the next function is called or an 'empty' sentinel\n * @param fn a function to enqueue\n * @returns either a `Promise` or the return value of the provided function\n */\nconst enqueue = (maybePromise, fn) => isPromisey(maybePromise) ? maybePromise.then(fn) : fn();\n/**\n * Check that a value is a `Promise`. To check, we first see if the value is an\n * instance of the `Promise` global. In a few circumstances, in particular if\n * the global has been overwritten, this is could be misleading, so we also do\n * a little 'duck typing' check to see if the `.then` property of the value is\n * defined and a function.\n *\n * @param maybePromise it might be a promise!\n * @returns whether it is or not\n */\nconst isPromisey = (maybePromise) => maybePromise instanceof Promise ||\n    (maybePromise && maybePromise.then && typeof maybePromise.then === 'function');\n/**\n * Update a component given reference to its host elements and so on.\n *\n * @param hostRef an object containing references to the element's host node,\n * VDom nodes, and other metadata\n * @param instance a reference to the underlying host element where it will be\n * rendered\n * @param isInitialLoad whether or not this function is being called as part of\n * the first render cycle\n */\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\n    var _a;\n    const elm = hostRef.$hostElement$;\n    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n    const rc = elm['s-rc'];\n    if (isInitialLoad) {\n        // DOM WRITE!\n        attachStyles(hostRef);\n    }\n    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n    {\n        callRender(hostRef, instance, elm, isInitialLoad);\n    }\n    if (rc) {\n        // ok, so turns out there are some child host elements\n        // waiting on this parent element to load\n        // let's fire off all update callbacks waiting\n        rc.map((cb) => cb());\n        elm['s-rc'] = undefined;\n    }\n    endRender();\n    endUpdate();\n    {\n        const childrenPromises = (_a = elm['s-p']) !== null && _a !== void 0 ? _a : [];\n        const postUpdate = () => postUpdateComponent(hostRef);\n        if (childrenPromises.length === 0) {\n            postUpdate();\n        }\n        else {\n            Promise.all(childrenPromises).then(postUpdate);\n            hostRef.$flags$ |= 4 /* HOST_FLAGS.isWaitingForChildren */;\n            childrenPromises.length = 0;\n        }\n    }\n};\n/**\n * Handle making the call to the VDom renderer with the proper context given\n * various build variables\n *\n * @param hostRef an object containing references to the element's host node,\n * VDom nodes, and other metadata\n * @param instance a reference to the underlying host element where it will be\n * rendered\n * @param elm the Host element for the component\n * @param isInitialLoad whether or not this function is being called as part of\n * @returns an empty promise\n */\nconst callRender = (hostRef, instance, elm, isInitialLoad) => {\n    try {\n        /**\n         * minification optimization: `allRenderFn` is `true` if all components have a `render`\n         * method, so we can call the method immediately. If not, check before calling it.\n         */\n        instance = instance.render() ;\n        {\n            hostRef.$flags$ &= ~16 /* HOST_FLAGS.isQueuedForUpdate */;\n        }\n        {\n            hostRef.$flags$ |= 2 /* HOST_FLAGS.hasRendered */;\n        }\n        {\n            {\n                // looks like we've got child nodes to render into this host element\n                // or we need to update the css class/attrs on the host element\n                // DOM WRITE!\n                {\n                    renderVdom(hostRef, instance, isInitialLoad);\n                }\n            }\n        }\n    }\n    catch (e) {\n        consoleError(e, hostRef.$hostElement$);\n    }\n    return null;\n};\nconst postUpdateComponent = (hostRef) => {\n    const tagName = hostRef.$cmpMeta$.$tagName$;\n    const elm = hostRef.$hostElement$;\n    const endPostUpdate = createTime('postUpdate', tagName);\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    if (!(hostRef.$flags$ & 64 /* HOST_FLAGS.hasLoadedComponent */)) {\n        hostRef.$flags$ |= 64 /* HOST_FLAGS.hasLoadedComponent */;\n        {\n            // DOM WRITE!\n            addHydratedFlag(elm);\n        }\n        endPostUpdate();\n        {\n            hostRef.$onReadyResolve$(elm);\n            if (!ancestorComponent) {\n                appDidLoad();\n            }\n        }\n    }\n    else {\n        endPostUpdate();\n    }\n    // load events fire from bottom to top\n    // the deepest elements load first then bubbles up\n    {\n        if (hostRef.$onRenderResolve$) {\n            hostRef.$onRenderResolve$();\n            hostRef.$onRenderResolve$ = undefined;\n        }\n        if (hostRef.$flags$ & 512 /* HOST_FLAGS.needsRerender */) {\n            nextTick(() => scheduleUpdate(hostRef, false));\n        }\n        hostRef.$flags$ &= ~(4 /* HOST_FLAGS.isWaitingForChildren */ | 512 /* HOST_FLAGS.needsRerender */);\n    }\n    // ( •_•)\n    // ( •_•)>⌐■-■\n    // (⌐■_■)\n};\nconst appDidLoad = (who) => {\n    // on appload\n    // we have finish the first big initial render\n    {\n        addHydratedFlag(doc.documentElement);\n    }\n    nextTick(() => emitEvent(win, 'appload', { detail: { namespace: NAMESPACE } }));\n};\nconst addHydratedFlag = (elm) => elm.classList.add('hydrated')\n    ;\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n    // check our new property value against our internal value\n    const hostRef = getHostRef(ref);\n    const oldVal = hostRef.$instanceValues$.get(propName);\n    const flags = hostRef.$flags$;\n    const instance = hostRef.$lazyInstance$ ;\n    newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n    // explicitly check for NaN on both sides, as `NaN === NaN` is always false\n    const areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);\n    const didValueChange = newVal !== oldVal && !areBothNaN;\n    if ((!(flags & 8 /* HOST_FLAGS.isConstructingInstance */) || oldVal === undefined) && didValueChange) {\n        // gadzooks! the property's value has changed!!\n        // set our new value!\n        hostRef.$instanceValues$.set(propName, newVal);\n        if (instance) {\n            if ((flags & (2 /* HOST_FLAGS.hasRendered */ | 16 /* HOST_FLAGS.isQueuedForUpdate */)) === 2 /* HOST_FLAGS.hasRendered */) {\n                // looks like this value actually changed, so we've got work to do!\n                // but only if we've already rendered, otherwise just chill out\n                // queue that we need to do an update, but don't worry about queuing\n                // up millions cuz this function ensures it only runs once\n                scheduleUpdate(hostRef, false);\n            }\n        }\n    }\n};\n/**\n * Attach a series of runtime constructs to a compiled Stencil component\n * constructor, including getters and setters for the `@Prop` and `@State`\n * decorators, callbacks for when attributes change, and so on.\n *\n * @param Cstr the constructor for a component that we need to process\n * @param cmpMeta metadata collected previously about the component\n * @param flags a number used to store a series of bit flags\n * @returns a reference to the same constructor passed in (but now mutated)\n */\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n    var _a;\n    if (cmpMeta.$members$) {\n        // It's better to have a const than two Object.entries()\n        const members = Object.entries(cmpMeta.$members$);\n        const prototype = Cstr.prototype;\n        members.map(([memberName, [memberFlags]]) => {\n            if ((memberFlags & 31 /* MEMBER_FLAGS.Prop */ ||\n                    ((flags & 2 /* PROXY_FLAGS.proxyState */) && memberFlags & 32 /* MEMBER_FLAGS.State */))) {\n                // proxyComponent - prop\n                Object.defineProperty(prototype, memberName, {\n                    get() {\n                        // proxyComponent, get value\n                        return getValue(this, memberName);\n                    },\n                    set(newValue) {\n                        // proxyComponent, set value\n                        setValue(this, memberName, newValue, cmpMeta);\n                    },\n                    configurable: true,\n                    enumerable: true,\n                });\n            }\n        });\n        if ((flags & 1 /* PROXY_FLAGS.isElementConstructor */)) {\n            const attrNameToPropName = new Map();\n            prototype.attributeChangedCallback = function (attrName, oldValue, newValue) {\n                plt.jmp(() => {\n                    const propName = attrNameToPropName.get(attrName);\n                    //  In a web component lifecycle the attributeChangedCallback runs prior to connectedCallback\n                    //  in the case where an attribute was set inline.\n                    //  ```html\n                    //    <my-component some-attribute=\"some-value\"></my-component>\n                    //  ```\n                    //\n                    //  There is an edge case where a developer sets the attribute inline on a custom element and then\n                    //  programmatically changes it before it has been upgraded as shown below:\n                    //\n                    //  ```html\n                    //    <!-- this component has _not_ been upgraded yet -->\n                    //    <my-component id=\"test\" some-attribute=\"some-value\"></my-component>\n                    //    <script>\n                    //      // grab non-upgraded component\n                    //      el = document.querySelector(\"#test\");\n                    //      el.someAttribute = \"another-value\";\n                    //      // upgrade component\n                    //      customElements.define('my-component', MyComponent);\n                    //    </script>\n                    //  ```\n                    //  In this case if we do not un-shadow here and use the value of the shadowing property, attributeChangedCallback\n                    //  will be called with `newValue = \"some-value\"` and will set the shadowed property (this.someAttribute = \"another-value\")\n                    //  to the value that was set inline i.e. \"some-value\" from above example. When\n                    //  the connectedCallback attempts to un-shadow it will use \"some-value\" as the initial value rather than \"another-value\"\n                    //\n                    //  The case where the attribute was NOT set inline but was not set programmatically shall be handled/un-shadowed\n                    //  by connectedCallback as this attributeChangedCallback will not fire.\n                    //\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n                    //\n                    //  TODO(STENCIL-16) we should think about whether or not we actually want to be reflecting the attributes to\n                    //  properties here given that this goes against best practices outlined here\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#avoid-reentrancy\n                    if (this.hasOwnProperty(propName)) {\n                        newValue = this[propName];\n                        delete this[propName];\n                    }\n                    else if (prototype.hasOwnProperty(propName) &&\n                        typeof this[propName] === 'number' &&\n                        this[propName] == newValue) {\n                        // if the propName exists on the prototype of `Cstr`, this update may be a result of Stencil using native\n                        // APIs to reflect props as attributes. Calls to `setAttribute(someElement, propName)` will result in\n                        // `propName` to be converted to a `DOMString`, which may not be what we want for other primitive props.\n                        return;\n                    }\n                    else if (propName == null) {\n                        // At this point we should know this is not a \"member\", so we can treat it like watching an attribute\n                        // on a vanilla web component\n                        const hostRef = getHostRef(this);\n                        const flags = hostRef === null || hostRef === void 0 ? void 0 : hostRef.$flags$;\n                        // We only want to trigger the callback(s) if:\n                        // 1. The instance is ready\n                        // 2. The watchers are ready\n                        // 3. The value has changed\n                        if (!(flags & 8 /* HOST_FLAGS.isConstructingInstance */) &&\n                            flags & 128 /* HOST_FLAGS.isWatchReady */ &&\n                            newValue !== oldValue) {\n                            const instance = hostRef.$lazyInstance$ ;\n                            const entry = cmpMeta.$watchers$[attrName];\n                            entry === null || entry === void 0 ? void 0 : entry.forEach((callbackName) => {\n                                if (instance[callbackName] != null) {\n                                    instance[callbackName].call(instance, newValue, oldValue, attrName);\n                                }\n                            });\n                        }\n                        return;\n                    }\n                    this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n                });\n            };\n            // Create an array of attributes to observe\n            // This list in comprised of all strings used within a `@Watch()` decorator\n            // on a component as well as any Stencil-specific \"members\" (`@Prop()`s and `@State()`s).\n            // As such, there is no way to guarantee type-safety here that a user hasn't entered\n            // an invalid attribute.\n            Cstr.observedAttributes = Array.from(new Set([\n                ...Object.keys((_a = cmpMeta.$watchers$) !== null && _a !== void 0 ? _a : {}),\n                ...members\n                    .filter(([_, m]) => m[0] & 15 /* MEMBER_FLAGS.HasAttribute */)\n                    .map(([propName, m]) => {\n                    const attrName = m[1] || propName;\n                    attrNameToPropName.set(attrName, propName);\n                    return attrName;\n                }),\n            ]));\n        }\n    }\n    return Cstr;\n};\n/**\n * Initialize a Stencil component given a reference to its host element, its\n * runtime bookkeeping data structure, runtime metadata about the component,\n * and (optionally) an HMR version ID.\n *\n * @param elm a host element\n * @param hostRef the element's runtime bookkeeping object\n * @param cmpMeta runtime metadata for the Stencil component\n * @param hmrVersionId an (optional) HMR version ID\n */\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId) => {\n    let Cstr;\n    // initializeComponent\n    if ((hostRef.$flags$ & 32 /* HOST_FLAGS.hasInitializedComponent */) === 0) {\n        // Let the runtime know that the component has been initialized\n        hostRef.$flags$ |= 32 /* HOST_FLAGS.hasInitializedComponent */;\n        {\n            // lazy loaded components\n            // request the component's implementation to be\n            // wired up with the host element\n            Cstr = loadModule(cmpMeta);\n            if (Cstr.then) {\n                // Await creates a micro-task avoid if possible\n                const endLoad = uniqueTime();\n                Cstr = await Cstr;\n                endLoad();\n            }\n            if (!Cstr.isProxied) {\n                proxyComponent(Cstr, cmpMeta, 2 /* PROXY_FLAGS.proxyState */);\n                Cstr.isProxied = true;\n            }\n            const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);\n            // ok, time to construct the instance\n            // but let's keep track of when we start and stop\n            // so that the getters/setters don't incorrectly step on data\n            {\n                hostRef.$flags$ |= 8 /* HOST_FLAGS.isConstructingInstance */;\n            }\n            // construct the lazy-loaded component implementation\n            // passing the hostRef is very important during\n            // construction in order to directly wire together the\n            // host element and the lazy-loaded instance\n            try {\n                new Cstr(hostRef);\n            }\n            catch (e) {\n                consoleError(e);\n            }\n            {\n                hostRef.$flags$ &= ~8 /* HOST_FLAGS.isConstructingInstance */;\n            }\n            endNewInstance();\n        }\n        if (Cstr.style) {\n            // this component has styles but we haven't registered them yet\n            let style = Cstr.style;\n            const scopeId = getScopeId(cmpMeta);\n            if (!styles.has(scopeId)) {\n                const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n                registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */));\n                endRegisterStyles();\n            }\n        }\n    }\n    // we've successfully created a lazy instance\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    const schedule = () => scheduleUpdate(hostRef, true);\n    if (ancestorComponent && ancestorComponent['s-rc']) {\n        // this is the initial load and this component it has an ancestor component\n        // but the ancestor component has NOT fired its will update lifecycle yet\n        // so let's just cool our jets and wait for the ancestor to continue first\n        // this will get fired off when the ancestor component\n        // finally gets around to rendering its lazy self\n        // fire off the initial update\n        ancestorComponent['s-rc'].push(schedule);\n    }\n    else {\n        schedule();\n    }\n};\nconst fireConnectedCallback = (instance) => {\n};\nconst connectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const cmpMeta = hostRef.$cmpMeta$;\n        const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n        if (!(hostRef.$flags$ & 1 /* HOST_FLAGS.hasConnected */)) {\n            // first time this component has connected\n            hostRef.$flags$ |= 1 /* HOST_FLAGS.hasConnected */;\n            {\n                // find the first ancestor component (if there is one) and register\n                // this component as one of the actively loading child components for its ancestor\n                let ancestorComponent = elm;\n                while ((ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host)) {\n                    // climb up the ancestors looking for the first\n                    // component that hasn't finished its lifecycle update yet\n                    if (ancestorComponent['s-p']) {\n                        // we found this components first ancestor component\n                        // keep a reference to this component's ancestor component\n                        attachToAncestor(hostRef, (hostRef.$ancestorComponent$ = ancestorComponent));\n                        break;\n                    }\n                }\n            }\n            // Lazy properties\n            // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n            if (cmpMeta.$members$) {\n                Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n                    if (memberFlags & 31 /* MEMBER_FLAGS.Prop */ && elm.hasOwnProperty(memberName)) {\n                        const value = elm[memberName];\n                        delete elm[memberName];\n                        elm[memberName] = value;\n                    }\n                });\n            }\n            {\n                initializeComponent(elm, hostRef, cmpMeta);\n            }\n        }\n        else {\n            // fire off connectedCallback() on component instance\n            if (hostRef === null || hostRef === void 0 ? void 0 : hostRef.$lazyInstance$) ;\n            else if (hostRef === null || hostRef === void 0 ? void 0 : hostRef.$onReadyPromise$) {\n                hostRef.$onReadyPromise$.then(() => fireConnectedCallback());\n            }\n        }\n        endConnected();\n    }\n};\nconst disconnectInstance = (instance) => {\n};\nconst disconnectedCallback = async (elm) => {\n    if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        if (hostRef === null || hostRef === void 0 ? void 0 : hostRef.$lazyInstance$) ;\n        else if (hostRef === null || hostRef === void 0 ? void 0 : hostRef.$onReadyPromise$) {\n            hostRef.$onReadyPromise$.then(() => disconnectInstance());\n        }\n    }\n};\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n    var _a;\n    const endBootstrap = createTime();\n    const cmpTags = [];\n    const exclude = options.exclude || [];\n    const customElements = win.customElements;\n    const head = doc.head;\n    const metaCharset = /*@__PURE__*/ head.querySelector('meta[charset]');\n    const visibilityStyle = /*@__PURE__*/ doc.createElement('style');\n    const deferredConnectedCallbacks = [];\n    let appLoadFallback;\n    let isBootstrapping = true;\n    Object.assign(plt, options);\n    plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n    lazyBundles.map((lazyBundle) => {\n        lazyBundle[1].map((compactMeta) => {\n            const cmpMeta = {\n                $flags$: compactMeta[0],\n                $tagName$: compactMeta[1],\n                $members$: compactMeta[2],\n                $listeners$: compactMeta[3],\n            };\n            {\n                cmpMeta.$members$ = compactMeta[2];\n            }\n            const tagName = cmpMeta.$tagName$;\n            const HostElement = class extends HTMLElement {\n                // StencilLazyHost\n                constructor(self) {\n                    // @ts-ignore\n                    super(self);\n                    self = this;\n                    registerHost(self, cmpMeta);\n                }\n                connectedCallback() {\n                    if (appLoadFallback) {\n                        clearTimeout(appLoadFallback);\n                        appLoadFallback = null;\n                    }\n                    if (isBootstrapping) {\n                        // connectedCallback will be processed once all components have been registered\n                        deferredConnectedCallbacks.push(this);\n                    }\n                    else {\n                        plt.jmp(() => connectedCallback(this));\n                    }\n                }\n                disconnectedCallback() {\n                    plt.jmp(() => disconnectedCallback(this));\n                }\n                componentOnReady() {\n                    return getHostRef(this).$onReadyPromise$;\n                }\n            };\n            cmpMeta.$lazyBundleId$ = lazyBundle[0];\n            if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n                cmpTags.push(tagName);\n                customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* PROXY_FLAGS.isElementConstructor */));\n            }\n        });\n    });\n    {\n        visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n        visibilityStyle.setAttribute('data-styles', '');\n        // Apply CSP nonce to the style tag if it exists\n        const nonce = (_a = plt.$nonce$) !== null && _a !== void 0 ? _a : queryNonceMetaTagContent(doc);\n        if (nonce != null) {\n            visibilityStyle.setAttribute('nonce', nonce);\n        }\n        head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n    }\n    // Process deferred connectedCallbacks now all components have been registered\n    isBootstrapping = false;\n    if (deferredConnectedCallbacks.length) {\n        deferredConnectedCallbacks.map((host) => host.connectedCallback());\n    }\n    else {\n        {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30)));\n        }\n    }\n    // Fallback appLoad event\n    endBootstrap();\n};\n/**\n * Assigns the given value to the nonce property on the runtime platform object.\n * During runtime, this value is used to set the nonce attribute on all dynamically created script and style tags.\n * @param nonce The value to be assigned to the platform nonce property.\n * @returns void\n */\nconst setNonce = (nonce) => (plt.$nonce$ = nonce);\n/**\n * A WeakMap mapping runtime component references to their corresponding host reference\n * instances.\n */\nconst hostRefs = /*@__PURE__*/ new WeakMap();\n/**\n * Given a {@link d.RuntimeRef} retrieve the corresponding {@link d.HostRef}\n *\n * @param ref the runtime ref of interest\n * @returns the Host reference (if found) or undefined\n */\nconst getHostRef = (ref) => hostRefs.get(ref);\n/**\n * Register a lazy instance with the {@link hostRefs} object so it's\n * corresponding {@link d.HostRef} can be retrieved later.\n *\n * @param lazyInstance the lazy instance of interest\n * @param hostRef that instances `HostRef` object\n * @returns a reference to the host ref WeakMap\n */\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set((hostRef.$lazyInstance$ = lazyInstance), hostRef);\n/**\n * Register a host element for a Stencil component, setting up various metadata\n * and callbacks based on {@link BUILD} flags as well as the component's runtime\n * metadata.\n *\n * @param hostElement the host element to register\n * @param cmpMeta runtime metadata for that component\n * @returns a reference to the host ref WeakMap\n */\nconst registerHost = (hostElement, cmpMeta) => {\n    const hostRef = {\n        $flags$: 0,\n        $hostElement$: hostElement,\n        $cmpMeta$: cmpMeta,\n        $instanceValues$: new Map(),\n    };\n    {\n        hostRef.$onReadyPromise$ = new Promise((r) => (hostRef.$onReadyResolve$ = r));\n        hostElement['s-p'] = [];\n        hostElement['s-rc'] = [];\n    }\n    return hostRefs.set(hostElement, hostRef);\n};\nconst consoleError = (e, el) => (0, console.error)(e, el);\nconst cmpModules = /*@__PURE__*/ new Map();\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n    // loadModuleImport\n    const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n    const bundleId = cmpMeta.$lazyBundleId$;\n    const module = cmpModules.get(bundleId) ;\n    if (module) {\n        return module[exportName];\n    }\n    /*!__STENCIL_STATIC_IMPORT_SWITCH__*/\n    return import(\n    /* @vite-ignore */\n    /* webpackInclude: /\\.entry\\.js$/ */\n    /* webpackExclude: /\\.system\\.entry\\.js$/ */\n    /* webpackMode: \"lazy\" */\n    `./${bundleId}.entry.js${''}`).then((importedModule) => {\n        {\n            cmpModules.set(bundleId, importedModule);\n        }\n        return importedModule[exportName];\n    }, consoleError);\n};\nconst styles = /*@__PURE__*/ new Map();\nconst win = typeof window !== 'undefined' ? window : {};\nconst doc = win.document || { head: {} };\nconst plt = {\n    $flags$: 0,\n    $resourcesUrl$: '',\n    jmp: (h) => h(),\n    raf: (h) => requestAnimationFrame(h),\n    ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n    rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n    ce: (eventName, opts) => new CustomEvent(eventName, opts),\n};\nconst promiseResolve = (v) => Promise.resolve(v);\nconst supportsConstructableStylesheets = /*@__PURE__*/ (() => {\n        try {\n            new CSSStyleSheet();\n            return typeof new CSSStyleSheet().replaceSync === 'function';\n        }\n        catch (e) { }\n        return false;\n    })()\n    ;\nconst queueDomReads = [];\nconst queueDomWrites = [];\nconst queueTask = (queue, write) => (cb) => {\n    queue.push(cb);\n    if (!queuePending) {\n        queuePending = true;\n        if (write && plt.$flags$ & 4 /* PLATFORM_FLAGS.queueSync */) {\n            nextTick(flush);\n        }\n        else {\n            plt.raf(flush);\n        }\n    }\n};\nconst consume = (queue) => {\n    for (let i = 0; i < queue.length; i++) {\n        try {\n            queue[i](performance.now());\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    queue.length = 0;\n};\nconst flush = () => {\n    // always force a bunch of medium callbacks to run, but still have\n    // a throttle on how many can run in a certain time\n    // DOM READS!!!\n    consume(queueDomReads);\n    // DOM WRITES!!!\n    {\n        consume(queueDomWrites);\n        if ((queuePending = queueDomReads.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n    }\n};\nconst nextTick = /*@__PURE__*/ (cb) => promiseResolve().then(cb);\nconst writeTask = /*@__PURE__*/ queueTask(queueDomWrites, true);\n\nexport { bootstrapLazy as b, h, promiseResolve as p, registerInstance as r, setNonce as s };\n\n//# sourceMappingURL=index-cef3b3fe.js.map","import { b as bootstrapLazy } from './index-cef3b3fe.js';\nexport { s as setNonce } from './index-cef3b3fe.js';\n\nconst defineCustomElements = (win, options) => {\n  if (typeof window === 'undefined') return undefined;\n  return bootstrapLazy([[\"my-button_2\",[[0,\"my-button\"],[0,\"my-component\",{\"first\":[1],\"middle\":[1],\"last\":[1]}]]]], options);\n};\n\nexport { defineCustomElements };\n\n//# sourceMappingURL=loader.js.map","\n(function(){if(\"undefined\"!==typeof window&&void 0!==window.Reflect&&void 0!==window.customElements){var a=HTMLElement;window.HTMLElement=function(){return Reflect.construct(a,[],this.constructor)};HTMLElement.prototype=a.prototype;HTMLElement.prototype.constructor=HTMLElement;Object.setPrototypeOf(HTMLElement,a)}})();\nexport * from '../dist/esm/polyfills/index.js';\nexport * from '../dist/esm/loader.js';\n","import { defineCustomElements } from \"./../../../packages/ui-stencil/loader\";\n\ndefineCustomElements();\n\n/** @type { import('@storybook/html').Preview } */\nconst preview = {\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n};\n\nexport default preview;\n"],"file":"assets/preview-baaf047b.js"}